worker_processes  1;
error_log error.log debug;

env INITIAL_SLACK_SECONDS=60;
env CRYPTO_CONFIG_DIR=/crypto-config/;
env JWT_SECRET_TXT=/crypto-config/jwtsecret.txt;
env JWT_COOKIE_DOMAIN=localhost;
#env JWT_COOKIE_DOMAIN=.afip.gob.ar;
env SERVICE_NAME=fe-webapp;

events {
    worker_connections 1024;
}

http {
    init_by_lua 'MOD_AUTH = require "afip.mod_auth"';

    server {
        listen        8000;
        charset       utf-8;
        charset_types application/json;
        default_type  application/json;

        location /api {
            set $payload '';

            access_by_lua_block { MOD_AUTH.secure({}) }

            include /usr/local/openresty/nginx/conf/proxy_pass.conf;

            proxy_pass http://bff:8081;
        }
        location /api/login {
            set $payload '';

            access_by_lua_block { MOD_AUTH.login({}) }

            include /usr/local/openresty/nginx/conf/proxy_pass.conf;

            proxy_pass http://bff:8081;
        }
        location /api/logout {
            content_by_lua_block { MOD_AUTH.logout({}) }
        }
        location /api/public {
            include /usr/local/openresty/nginx/conf/proxy_pass.conf;

            proxy_pass http://bff:8081;
        }

        # test nginx
        location /nginx-hello {
            set $foo Hello;
            echo "nginx-proxy say: ===========================================";
            echo "nginx-proxy say: $foo !!!";
            echo "nginx-proxy say: http_user_agent [$http_user_agent]";
            echo "nginx-proxy say: remote_addr [$remote_addr]";
            echo "nginx-proxy say: proxy_add_x_forwarded_for [$proxy_add_x_forwarded_for]";
            echo "nginx-proxy say: scheme [$scheme]";
        }
        location /nginx-say-args {
            content_by_lua_block {
                local cjson = require "cjson"
                local get, post, files = require "resty.reqargs"()
                ngx.status  = ngx.HTTP_OK
                ngx.say("nginx-proxy say: post [" .. cjson.encode(post) .. "]")
                ngx.say("nginx-proxy say: get ["  .. cjson.encode(get) .. "]")
                return ngx.exit(ngx.HTTP_OK)
            }
        }
    }
}
